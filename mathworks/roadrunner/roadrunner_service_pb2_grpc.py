# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from mathworks.roadrunner import roadrunner_service_messages_pb2 as mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mathworks/roadrunner/roadrunner_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RoadRunnerServiceStub(object):
    """Service for the RoadRunner methods (type definitions are in roadrunner_service_messages.proto)
    ////////////////////////////////////
    Project Methods
    ////////////////////////////////////
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewProject = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/NewProject',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewProjectRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewProjectResponse.FromString,
                _registered_method=True)
        self.LoadProject = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/LoadProject',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadProjectRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadProjectResponse.FromString,
                _registered_method=True)
        self.SaveProject = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/SaveProject',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveProjectRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveProjectResponse.FromString,
                _registered_method=True)
        self.NewScene = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/NewScene',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewSceneRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewSceneResponse.FromString,
                _registered_method=True)
        self.LoadScene = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/LoadScene',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadSceneRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadSceneResponse.FromString,
                _registered_method=True)
        self.SaveScene = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/SaveScene',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveSceneRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveSceneResponse.FromString,
                _registered_method=True)
        self.ChangeWorldSettings = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/ChangeWorldSettings',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ChangeWorldSettingsRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ChangeWorldSettingsResponse.FromString,
                _registered_method=True)
        self.SetScenarioVariable = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/SetScenarioVariable',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SetVariableRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SetVariableResponse.FromString,
                _registered_method=True)
        self.GetScenarioVariable = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/GetScenarioVariable',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetVariableRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetVariableResponse.FromString,
                _registered_method=True)
        self.GetAllScenarioVariables = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/GetAllScenarioVariables',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAllVariablesRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAllVariablesResponse.FromString,
                _registered_method=True)
        self.NewScenario = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/NewScenario',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewScenarioRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewScenarioResponse.FromString,
                _registered_method=True)
        self.LoadScenario = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/LoadScenario',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadScenarioRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadScenarioResponse.FromString,
                _registered_method=True)
        self.SaveScenario = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/SaveScenario',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveScenarioRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveScenarioResponse.FromString,
                _registered_method=True)
        self.PrepareSimulation = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/PrepareSimulation',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.PrepareSimulationRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.PrepareSimulationResponse.FromString,
                _registered_method=True)
        self.SimulateScenario = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/SimulateScenario',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SimulateScenarioRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SimulateScenarioResponse.FromString,
                _registered_method=True)
        self.RemapAnchor = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/RemapAnchor',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RemapAnchorRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RemapAnchorResponse.FromString,
                _registered_method=True)
        self.GetAnchors = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/GetAnchors',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAnchorsRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAnchorsResponse.FromString,
                _registered_method=True)
        self.ExportVideo = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/ExportVideo',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportVideoRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportVideoResponse.FromString,
                _registered_method=True)
        self.SetCameraMode = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/SetCameraMode',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.CameraModeRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.CameraModeResponse.FromString,
                _registered_method=True)
        self.Export = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/Export',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportResponse.FromString,
                _registered_method=True)
        self.Import = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/Import',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ImportRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ImportResponse.FromString,
                _registered_method=True)
        self.Exit = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/Exit',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExitRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExitResponse.FromString,
                _registered_method=True)
        self.RoadRunnerStatus = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/RoadRunnerStatus',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RoadRunnerStatusRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RoadRunnerStatusResponse.FromString,
                _registered_method=True)
        self.ExportActorTrajectoryToCSV = channel.unary_unary(
                '/mathworks.roadrunner.RoadRunnerService/ExportActorTrajectoryToCSV',
                request_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportActorTrajectoryToCSVRequest.SerializeToString,
                response_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportActorTrajectoryToCSVResponse.FromString,
                _registered_method=True)


class RoadRunnerServiceServicer(object):
    """Service for the RoadRunner methods (type definitions are in roadrunner_service_messages.proto)
    ////////////////////////////////////
    Project Methods
    ////////////////////////////////////
    """

    def NewProject(self, request, context):
        """Create and activate new project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadProject(self, request, context):
        """Load specified project if not already loaded
        - A new scene is always created, even if the specified project is already loaded
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveProject(self, request, context):
        """Save any modified assets in the current project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewScene(self, request, context):
        """////////////////////////////////////
        Scene Methods
        ////////////////////////////////////

        Create new scene in the current project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadScene(self, request, context):
        """Load scene 
        - If the specified scene does not belong to the existing project, the appropriate project
        is determined from the scene and loaded
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveScene(self, request, context):
        """Save current scene to specified path or to path of current scene
        If the scene contains modified assets, the current project is also saved
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeWorldSettings(self, request, context):
        """Query or modify the world settings of the active scene, including the world origin and scene
        extents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetScenarioVariable(self, request, context):
        """////////////////////////////////////
        Scenario Methods
        ////////////////////////////////////

        Set variable in the current scenario
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetScenarioVariable(self, request, context):
        """Retrieves variable value in the current scenario
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllScenarioVariables(self, request, context):
        """Retrieves all variable names and values in the current scenario
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewScenario(self, request, context):
        """Create new scenario in the current project
        - Requires an open scene
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadScenario(self, request, context):
        """Load scenario
        - The specified scenario is loaded into the existing scene if it was previously saved with
        the current scene (or if keep_current_scene is set to true).
        - Otherwise, the scene is determined from the scenario and loaded.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveScenario(self, request, context):
        """Save current scenario to specified path or to path of current scenario
        - The scene and project are also saved.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareSimulation(self, request, context):
        """Submits simulation data (scenario definition, map definition) to the SSE making them
        available to be queried without starting the simulation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimulateScenario(self, request, context):
        """Simulate current scenario
        - Set blocking to true to optionally block additional calls until simulation is over.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemapAnchor(self, request, context):
        """Remap Anchor
        - Remaps dependencies from a source anchor in the scenario to a different target road anchor. 
        - Target road anchor can be specified either by name or position.
        - A name remap will search for a road anchor with matching name in the scenario and scene.
        - A position remap will create a new road anchor on the road closest to the provided position.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnchors(self, request, context):
        """Get Anchors
        - Returns the available Scene and Scenario anchors in the currently open datasets.
        - Each anchor info will contain a name, type, road id, and world position.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportVideo(self, request, context):
        """Create Video from the simulation log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCameraMode(self, request, context):
        """Set CameraMode for video logging
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Export(self, request, context):
        """////////////////////////////////////
        Other methods
        ////////////////////////////////////

        Export RoadRunner scene or scenario to supported file format
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Import(self, request, context):
        """Import supported file format into scene or scenario
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exit(self, request, context):
        """Exit RoadRunner
        The RoadRunner application exits and the gRPC server is shut down
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RoadRunnerStatus(self, request, context):
        """Get the current state of RoadRunner (Which scenes/scenarios are loaded, unsaved changes, etc.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportActorTrajectoryToCSV(self, request, context):
        """Create CSV from the simulation log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoadRunnerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewProject': grpc.unary_unary_rpc_method_handler(
                    servicer.NewProject,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewProjectRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewProjectResponse.SerializeToString,
            ),
            'LoadProject': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadProject,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadProjectRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadProjectResponse.SerializeToString,
            ),
            'SaveProject': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveProject,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveProjectRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveProjectResponse.SerializeToString,
            ),
            'NewScene': grpc.unary_unary_rpc_method_handler(
                    servicer.NewScene,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewSceneRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewSceneResponse.SerializeToString,
            ),
            'LoadScene': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadScene,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadSceneRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadSceneResponse.SerializeToString,
            ),
            'SaveScene': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveScene,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveSceneRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveSceneResponse.SerializeToString,
            ),
            'ChangeWorldSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeWorldSettings,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ChangeWorldSettingsRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ChangeWorldSettingsResponse.SerializeToString,
            ),
            'SetScenarioVariable': grpc.unary_unary_rpc_method_handler(
                    servicer.SetScenarioVariable,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SetVariableRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SetVariableResponse.SerializeToString,
            ),
            'GetScenarioVariable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetScenarioVariable,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetVariableRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetVariableResponse.SerializeToString,
            ),
            'GetAllScenarioVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllScenarioVariables,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAllVariablesRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAllVariablesResponse.SerializeToString,
            ),
            'NewScenario': grpc.unary_unary_rpc_method_handler(
                    servicer.NewScenario,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewScenarioRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewScenarioResponse.SerializeToString,
            ),
            'LoadScenario': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadScenario,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadScenarioRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadScenarioResponse.SerializeToString,
            ),
            'SaveScenario': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveScenario,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveScenarioRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveScenarioResponse.SerializeToString,
            ),
            'PrepareSimulation': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareSimulation,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.PrepareSimulationRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.PrepareSimulationResponse.SerializeToString,
            ),
            'SimulateScenario': grpc.unary_unary_rpc_method_handler(
                    servicer.SimulateScenario,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SimulateScenarioRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SimulateScenarioResponse.SerializeToString,
            ),
            'RemapAnchor': grpc.unary_unary_rpc_method_handler(
                    servicer.RemapAnchor,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RemapAnchorRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RemapAnchorResponse.SerializeToString,
            ),
            'GetAnchors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnchors,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAnchorsRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAnchorsResponse.SerializeToString,
            ),
            'ExportVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportVideo,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportVideoRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportVideoResponse.SerializeToString,
            ),
            'SetCameraMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCameraMode,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.CameraModeRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.CameraModeResponse.SerializeToString,
            ),
            'Export': grpc.unary_unary_rpc_method_handler(
                    servicer.Export,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportResponse.SerializeToString,
            ),
            'Import': grpc.unary_unary_rpc_method_handler(
                    servicer.Import,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ImportRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ImportResponse.SerializeToString,
            ),
            'Exit': grpc.unary_unary_rpc_method_handler(
                    servicer.Exit,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExitRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExitResponse.SerializeToString,
            ),
            'RoadRunnerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.RoadRunnerStatus,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RoadRunnerStatusRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RoadRunnerStatusResponse.SerializeToString,
            ),
            'ExportActorTrajectoryToCSV': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportActorTrajectoryToCSV,
                    request_deserializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportActorTrajectoryToCSVRequest.FromString,
                    response_serializer=mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportActorTrajectoryToCSVResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mathworks.roadrunner.RoadRunnerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mathworks.roadrunner.RoadRunnerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RoadRunnerService(object):
    """Service for the RoadRunner methods (type definitions are in roadrunner_service_messages.proto)
    ////////////////////////////////////
    Project Methods
    ////////////////////////////////////
    """

    @staticmethod
    def NewProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/NewProject',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewProjectRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/LoadProject',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadProjectRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/SaveProject',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveProjectRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NewScene(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/NewScene',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewSceneRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewSceneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadScene(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/LoadScene',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadSceneRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadSceneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveScene(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/SaveScene',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveSceneRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveSceneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeWorldSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/ChangeWorldSettings',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ChangeWorldSettingsRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ChangeWorldSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetScenarioVariable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/SetScenarioVariable',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SetVariableRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SetVariableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetScenarioVariable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/GetScenarioVariable',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetVariableRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetVariableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllScenarioVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/GetAllScenarioVariables',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAllVariablesRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAllVariablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NewScenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/NewScenario',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewScenarioRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.NewScenarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadScenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/LoadScenario',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadScenarioRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.LoadScenarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveScenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/SaveScenario',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveScenarioRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SaveScenarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PrepareSimulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/PrepareSimulation',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.PrepareSimulationRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.PrepareSimulationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SimulateScenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/SimulateScenario',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SimulateScenarioRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.SimulateScenarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemapAnchor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/RemapAnchor',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RemapAnchorRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RemapAnchorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAnchors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/GetAnchors',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAnchorsRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.GetAnchorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExportVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/ExportVideo',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportVideoRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportVideoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetCameraMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/SetCameraMode',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.CameraModeRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.CameraModeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Export(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/Export',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Import(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/Import',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ImportRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ImportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Exit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/Exit',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExitRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RoadRunnerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/RoadRunnerStatus',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RoadRunnerStatusRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.RoadRunnerStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExportActorTrajectoryToCSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mathworks.roadrunner.RoadRunnerService/ExportActorTrajectoryToCSV',
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportActorTrajectoryToCSVRequest.SerializeToString,
            mathworks_dot_roadrunner_dot_roadrunner__service__messages__pb2.ExportActorTrajectoryToCSVResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
